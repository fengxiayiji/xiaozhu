module.exports 初始值为一个空对象 {}
exports 是指向的 module.exports 的引用
require() 返回的是 module.exports 而不是 exports

may_buyDetailTable
字符串
this.$router.push('/home/first')

// 对象
this.$router.push({ path: '/home/first' })

// 命名的路由
this.$router.push({ name: 'home', params: { userId: wise }})



原始的文件上传

 $(document).on('change', ':file', function(){
        //上传参数

        var file =this.files[0];
        //判断图片类型
		if(file){
            if (!/\.(gif|jpg|jpeg|png|GIF|JPG|PNG)$/.test(file.name)) {
                alert("图片类型必须是.gif,jpeg,jpg,png中的一种")
                return false;
            }
		}
        var size = file.size;   //注意，这里读到的是字节数
        var maxSize = 5 * 1024 * 1024;
        if (maxSize < size) {
            alert("上传图片不能超过5M");
            return false;
        }

        var form = new FormData();
        form.append("img",file);
        settings.data = form;
        /*  var wrap = $(this).parent();
          //上传后处理
          $.ajax(settings).done(function (response) {
            wrap.append('<img src="' + fileHttp + response + '" data-url="' + response + '" alt="" class="pecen_yzlist_pic upload_pic">');
              $("#tip").addClass("none");
              wrap.find(".pingzhen_close").show();
          });*/
        var wrap = $(this).closest('td');
        var $pingzhen = $(this).parent();
        //上传后处理
        $.ajax(settings).done(function (response) {
            if ($(".upload_pic").length < 3) {
                wrap.append('<div class="pingzhen no-fileInput">'+
		 '<img src="' + fileHttp + response + '" data-url="' + response + '" alt="" class="pecen_yzlist_pic upload_pic">'+		 
		 '<img src="../imgs/spfb_img_clear.png" alt="" class="spfb_picbox_clear" id="imgRemove"></div>');
			};
			$('#fileBtn').find('input').val('');
            if ($(".upload_pic").length == 3){
                $pingzhen.addClass("none");
            }
            $("#tip").addClass("none");
        });
    })

getElementByTagName() -------------通过标签名称

箭头函数的 this 永远指向其上下文的  this ，任何方法都改变不了其指向，如 call() ,  bind() ,  apply() 
普通函数的this指向调用它的那个对象\

1.-------------------------let和const都一样
let不允许在相同作用域内，重复声明同一个变量。
函数作用域是针对局部变量来说的，在函数中定义的变量在函数外不能获取.

2.----------------const保证的不变是地址。
const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。

3------------------冻结对象
如果真的想将对象冻结，应该使用Object.freeze方法。

4---------------es6 的六种声明变量
var function let const import class 

5-------------顶层变量
顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。ES5 之中，顶层对象的属性与全局变量是等价的。

6-----------------
var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。

7---------------------es6的新写法

let [a, b, c] = [1, 2, 3];

8----------解构赋值允许指定默认值。


let [x, y = 'b'] = ['a']; // x='a', y='b'
let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'
注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。----只能是undefined


const [a, b, c, d, e] = 'hello';
a // "h"
b // "e"
c // "l"
d // "l"
e // "o"   什么狗屁解构。。。
9=================提取json
let jsonData = {
  id: 42,
  status: "OK",
  data: [867, 5309]
};

let { id, status, data: number } = jsonData; 

console.log(id, status, number);
10----------------------------------遍历 Map 结构
const map = new Map();
map.set('first', 'hello');
map.set('second', 'world');

for (let [key, value] of map) {
  console.log(key + " is " + value);
}

11-------------------------模板字符串
${字段}

12--------------RegExp正则表达式
var regex = new RegExp('xyz', 'i');
// 等价于
var regex = /xyz/i;

13--------------------ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。
// ES5的写法
parseInt('12.34') // 12
parseFloat('123.45#') // 123.45

// ES6的写法
Number.parseInt('12.34') // 12
Number.parseFloat('123.45#') // 123.45

14--------------指数运算符
ES2016 新增了一个指数运算符（**）。
let a = 1.5;
a **= 2;
// 等同于 a = a * a;

let b = 4;
b **= 3;
// 等同于 b = b * b * b;

15-----------------
symbol  第七类型
set  map 数据结构
proxy
reflect
async
16-----------------------------------class
class Point {
  constructor() {
    // ...
  }

  toString() {
    // ...
  }

  toValue() {
    // ...
  }
}

// 等同于

Point.prototype = {
  constructor() {},
  toString() {},
  toValue() {},
};
17------Object.assign方法可以很方便地一次向类添加多个方法(方法可用改变地址的赋值数组)
class Point {
  constructor(){
    // ...
  }
}

Object.assign(Point.prototype, {
  toString(){},
  toValue(){}
});

18---------------类必须使用new调用，否则会报错
class Point {
  // ...
}

// 报错
var point = Point(2, 3);

// 正确
var point = new Point(2, 3）
19------------------------------------原型链
var Person = function(name) {
    this.name = name;
}

// 初始化一个对象 p
var p = new Person();

// 推导过程 --> 
// var p = {};
// p.__proto__ =  Person.prototype;
// Person.call(p);

类不存在变量提升（hoist），这一点与 ES5 完全不同。



20------------------------
其实不是这样的除非用call和apply去改变this指向


21-------------------------------私有方法和私有属性 
1.
class Widget {

  // 公有方法
  foo (baz) {
    this._bar(baz);
  }

  // 私有方法
  _bar(baz) {
    return this.snaf = baz;
  }

  // ...
}
2.
class Widget {
  foo (baz) {
    bar.call(this, baz);
  }

  // ...
}

function bar(baz) {
  return this.snaf = baz;
}
3.


22---------------------------name的属性
name属性总是返回紧跟在class关键字后面的类名。
注：class Point {}
Point.name // "Point"

23---------------------------父类的静态方法，可以被子类继承。
class Foo {
  static classMethod() {
    return 'hello';
  }
}

class Bar extends Foo {
}

Bar.classMethod() // 'hello'

24----------------上面的写法为Foo类定义了一个静态属性prop
class Foo {
}

Foo.prop = 1;
Foo.prop // 1

或者
class Foo {
    prop = 23;
	static  prop2 = 233

}

25------------------------------...yisi
扩展运算符（ spread ）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。


26---------------------------
Object.getPrototypeOf方法可以用来从子类上获取父类。

27-----------------在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错


28---------------super这个关键字，既可以当作函数使用，也可以当作对象使用
ES6 要求，子类的构造函数必须执行一次super函数。


29----------------super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。
class A {
  p() {
    return 2;
  }
}

class B extends A {
  constructor() {
    super();
    console.log(super.p()); // 2
  }
}

let b = new B();

30---------------------------------继承的多种方法
原型链继承
构造继承
实例继承

31--------------------------------ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。
class A {
  constructor() {
    this.x = 1;
  }
  print() {
    console.log(this.x);
  }
}

class B extends A {
  constructor() {
    super();
    this.x = 2;
  }
  m() {
    super.print();
  }
}

let b = new B();
b.m() // 2

32-------------------------------------------
class A {
}

class B extends A {
}

B.__proto__ === A // true
B.prototype.__proto__ === A.prototype // true



33---------------------继承的实现模式
class A {
}

class B {
}

// B 的实例继承 A 的实例
Object.setPrototypeOf(B.prototype, A.prototype);

// B 继承 A 的静态属性
Object.setPrototypeOf(B, A);

const b = new B();


34-----------------------------------import()可以在需要的时候，再加载某个模块。
button.addEventListener('click', event => {
  import('./dialogBox.js')
  .then(dialogBox => {
    dialogBox.open();
  })
  .catch(error => {
    /* Error handling */
  })
});

35-----------------------------vue的渲

new Vue，执行初始化
挂载$mount方法，通过自定义Render方法、template、el等生成Render函数
通过Watcher监听数据的变化
当数据发生变化时，Render函数执行生成VNode对象
通过patch方法，对比新旧VNode对象，通过DOM Diff算法，添加、修改、删除真正的DOM元素



36-----------------dom
removeChild() ---删除子节点
replaceChild()---替换子节点
createAttribute()  --创建属性节点
createElement()------创建元素节点

37-----------------------ES6 模块与 CommonJS 模块的差异 § ⇧
CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。
CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。

38-----------------CommonJS 模块的输出都定义在module.exports这个属性上面。
// a.js
module.exports = {
  foo: 'hello',
  bar: 'world'
};

// 等同于
export default {
  foo: 'hello',
  bar: 'world'
};































